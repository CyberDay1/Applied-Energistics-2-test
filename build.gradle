import org.gradle.api.plugins.JavaPlugin

plugins {
    id 'java'
    id 'net.neoforged.moddev'
    id 'dev.kikugie.stonecutter'
    id 'com.diffplug.spotless'
}

group = 'appeng'

def minecraftConfiguration = configurations.maybeCreate('minecraft')

configurations.named(JavaPlugin.COMPILE_CLASSPATH_CONFIGURATION_NAME) {
    extendsFrom minecraftConfiguration
}

configurations.named(JavaPlugin.RUNTIME_CLASSPATH_CONFIGURATION_NAME) {
    extendsFrom minecraftConfiguration
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

neoForge {
    version = project.property('NEOFORGE') as String
}

repositories {
    mavenLocal()
    maven { url = 'https://maven.neoforged.net/releases' }
    mavenCentral()
}

dependencies {
    def neoForgeVersion = project.property('NEOFORGE') as String
    if (neoForgeVersion.contains('x')) {
        logger.lifecycle("[stonecutter] TODO: define NeoForge artifact for version ${neoForgeVersion} before enabling full builds.")
    } else {
        minecraft "net.neoforged:forge:${neoForgeVersion}"
    }
}

def accessTransformerFile = file('accesstransformer.cfg')
if (accessTransformerFile.exists() && accessTransformerFile.length() > 0) {
    neoForge {
        accessTransformers.add(accessTransformerFile)
    }
}

tasks.register('runData', JavaExec) {
    group = 'datagen'
    classpath = sourceSets.main.runtimeClasspath
    mainClass.set('appeng.data.AE2DataGen')
    jvmArgs('-Dneoforge.enabledGameTestNamespaces=appliedenergistics2')
}

tasks.register('runClientSmoke', JavaExec) {
    group = 'verification'
    classpath = sourceSets.main.runtimeClasspath
    mainClass.set('net.minecraft.client.main.Main')
}

tasks.withType(Test).configureEach {
    onlyIf { project.hasProperty('enableTests') }
}

spotless {
    java {
        target('src/*/java/**/*.java')
        removeUnusedImports()
        googleJavaFormat('1.17.0').reflowLongStrings()
    }

    json {
        target('src/**/*.json', 'src/**/*.mcmeta')
        gson()
    }

    format('misc') {
        target('*.md', 'src/**/*.mcfunction', 'src/**/*.lang')
        targetExclude('build/**', 'out/**')
        trimTrailingWhitespace()
        endWithNewline()
    }

    kotlinGradle {
        target('*.gradle.kts', 'stonecutter.gradle.kts')
        ktlint()
    }

    groovyGradle {
        target('*.gradle')
        greclipse()
    }
}

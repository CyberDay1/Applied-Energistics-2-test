import org.gradle.api.GradleException

plugins {
    id 'java'
    id 'net.neoforged.moddev'
    id 'net.neoforged.moddev.repositories'
    id 'dev.kikugie.stonecutter'
    id 'com.diffplug.spotless'
}

group = 'appeng'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

def neoForgeVersionProvider = providers.gradleProperty('NEOFORGE').orElse(
        providers.provider { project.findProperty('NEOFORGE')?.toString() ?: '' })
def neoForgeVersion = neoForgeVersionProvider.orNull
if (!neoForgeVersion) {
    throw new GradleException('Missing NEOFORGE version property')
}
def modId = project.findProperty('modid')?.toString()
if (!modId) {
    throw new GradleException('Missing modid property')
}
def accessTransformerFile = rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
def hasAccessTransformers = accessTransformerFile.exists() && accessTransformerFile.readLines().any { line ->
    def trimmed = line.trim()
    trimmed && !trimmed.startsWith('#') && !trimmed.startsWith('//')
}

neoForge {
    version = neoForgeVersion
    runs {
        client {
            workingDirectory = project.file('run/client')
        }
        server {
            workingDirectory = project.file('run/server')
        }
        data {
            workingDirectory = project.file('run/data')
            programArguments.addAll('--mod', modId, '--all')
        }
    }
    if (hasAccessTransformers) {
        accessTransformers.from(accessTransformerFile)
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neoForgeVersion}"
}

tasks.register('runData', JavaExec) {
    group = 'datagen'
    classpath = sourceSets.main.runtimeClasspath
    mainClass.set('appeng.data.AE2DataGen')
    jvmArgs('-Dneoforge.enabledGameTestNamespaces=appliedenergistics2')
}

tasks.register('runClientSmoke', JavaExec) {
    group = 'verification'
    classpath = sourceSets.main.runtimeClasspath
    mainClass.set('net.minecraft.client.main.Main')
}

tasks.withType(Test).configureEach {
    onlyIf { project.hasProperty('enableTests') }
}

spotless {
    java {
        target('src/*/java/**/*.java')
        removeUnusedImports()
        googleJavaFormat('1.17.0').reflowLongStrings()
    }

    json {
        target('src/**/*.json', 'src/**/*.mcmeta')
        gson()
    }

    format('misc') {
        target('*.md', 'src/**/*.mcfunction', 'src/**/*.lang')
        targetExclude('build/**', 'out/**')
        trimTrailingWhitespace()
        endWithNewline()
    }

    kotlinGradle {
        target('*.gradle.kts', 'stonecutter.gradle.kts')
        ktlint()
    }

    groovyGradle {
        target('*.gradle')
        greclipse()
    }
}

import dev.kikugie.stonecutter.data.StonecutterProject
import groovy.json.JsonSlurper
import org.gradle.api.initialization.resolve.RepositoriesMode
import org.gradle.api.initialization.resolve.RulesMode

pluginManagement {
    repositories {
        gradlePluginPortal()
        maven { url = 'https://maven.neoforged.net/releases' }
    }
    plugins {
        id 'com.diffplug.spotless' version '6.25.0'
        id 'net.neoforged.moddev' version '2.0.113'
        id 'net.neoforged.moddev.repositories' version '2.0.113'
        id 'dev.kikugie.stonecutter' version '0.7.10'
    }
}

plugins {
    id 'net.neoforged.moddev.repositories'
    id 'org.gradle.toolchains.foojay-resolver-convention' version '0.9.0'
    id 'dev.kikugie.stonecutter'
}

def stonecutterConfigFile = file("stonecutter.json")
def stonecutterConfig = new JsonSlurper().parse(stonecutterConfigFile)

def rawStonecutterVersions = stonecutterConfig.versions
List<StonecutterProject> stonecutterProjects
Map<String, Map<String, ?>> stonecutterTargets

if (rawStonecutterVersions instanceof Map) {
    Map<String, ?> versionsMap = (Map<String, ?>) rawStonecutterVersions
    stonecutterProjects = versionsMap.entrySet().collect { entry ->
        new StonecutterProject(entry.key, entry.key)
    }
    stonecutterTargets = versionsMap.collectEntries { version, dataObj ->
        Map<?, ?> data = dataObj instanceof Map ? (Map<?, ?>) dataObj : [:]
        Map<?, ?> vars = data.vars instanceof Map ? (Map<?, ?>) data.vars : [:]
        def mcValue = (data.mcVersion ?: data.MC ?: version)?.toString()
        def neoForgeValue = (vars.NEOFORGE ?: data.NEOFORGE)?.toString()
        def packFormatValue = (vars.PACK_FORMAT ?: data.PACK_FORMAT)?.toString()
        [
                (version): [
                        MC         : mcValue,
                        NEOFORGE   : neoForgeValue,
                        PACK_FORMAT: packFormatValue
                ]
        ]
    }
} else {
    List<String> stonecutterVersions = (rawStonecutterVersions ?: []) as List<String>
    stonecutterProjects = stonecutterVersions.collect { version ->
        new StonecutterProject(version, version)
    }
    def legacyTargets = ((stonecutterConfig.targets ?: [:]) as Map<String, ?>)
    stonecutterTargets = legacyTargets.collectEntries { key, value ->
        Map<?, ?> data = value instanceof Map ? (Map<?, ?>) value : [:]
        [
                (key): [
                        MC         : (data.MC ?: key)?.toString(),
                        NEOFORGE   : data.NEOFORGE?.toString(),
                        PACK_FORMAT: data.PACK_FORMAT?.toString()
                ]
        ]
    }
}

stonecutterTargets = stonecutterTargets ?: [:]

stonecutter.shared {
    versions(stonecutterProjects)
    vcsVersion = "1.21.4-neoforge"
    kotlinController = true
    centralScript = 'stonecutter.gradle.kts'
    mapBuilds { target, project ->
        "build.neoforge.gradle.kts"
    }
}

stonecutter.create(rootProject, stonecutterConfigFile)

stonecutter {
    kotlinController = true
    centralScript = 'stonecutter.gradle.kts'
}

gradle.rootProject { root ->
    root.extensions.extraProperties.set("stonecutterVersionMatrix", stonecutterTargets)

    def defaultVersion = (stonecutterConfig.default ?: stonecutterConfig.vcs ?: '1.21.4-neoforge') as String
    def defaults = stonecutterTargets[defaultVersion] ?: [:]

    def mcVersion = providers.gradleProperty("MC").getOrElse(defaults.MC ?: defaultVersion)
    def neoForgeVersion = providers.gradleProperty("NEOFORGE").getOrElse(defaults.NEOFORGE ?: '')
    def packFormat = providers.gradleProperty("PACK_FORMAT").getOrElse(defaults.PACK_FORMAT ?: '')

    allprojects { proj ->
        if (mcVersion) {
            proj.extensions.extraProperties.set("MC", mcVersion)
            proj.extensions.extraProperties.set("minecraft_version", mcVersion)
        }
        if (neoForgeVersion) {
            proj.extensions.extraProperties.set("NEOFORGE", neoForgeVersion)
            proj.extensions.extraProperties.set("neoforge_version", neoForgeVersion)
            proj.extensions.extraProperties.set("neoforge_version_range", "[${neoForgeVersion},)")
        }
        if (packFormat) {
            proj.extensions.extraProperties.set("PACK_FORMAT", packFormat)
        }
    }
}

dependencyResolutionManagement {
    repositoriesMode = RepositoriesMode.PREFER_PROJECT
    rulesMode = RulesMode.FAIL_ON_PROJECT_RULES
    repositories {
        maven {
            url = 'https://maven.shedaniel.me/'
            content {
                includeGroup 'me.shedaniel'
                includeGroup 'me.shedaniel.cloth'
                includeGroup 'dev.architectury'
            }
        }
        maven {
            url = 'https://maven2.bai.lol'
            content {
                includeGroup 'mcp.mobius.waila'
                includeGroup 'lol.bai'
            }
        }
        maven {
            name = 'TerraformersMC'
            url = 'https://maven.terraformersmc.com/'
            content {
                includeGroup 'dev.emi'
            }
        }
        maven {
            name = 'cursemaven'
            url = 'https://www.cursemaven.com'
            content {
                includeGroup 'curse.maven'
            }
        }
        maven {
            url = 'https://maven.k-4u.nl/'
            content {
                includeGroup 'mcjty.theoneprobe'
            }
        }
        maven {
            url = 'https://maven.theillusivec4.top/'
            content {
                includeGroup 'top.theillusivec4.curios'
            }
        }
        maven {
            url = 'https://maven.blamejared.com/'
            content {
                includeGroup 'mezz.jei'
            }
        }
        mavenLocal() {
            content {
                includeModule('org.appliedenergistics', 'guideme')
            }
        }
        mavenCentral()
    }
}

rootProject.name = 'ae2'
